import React, { useState, useEffect } from 'react';

function PetForm({ fetchPets, selectedCoords }) {
  const [formData, setFormData] = useState({
    type: '',
    description: '',
    status: '', // –î–æ–±–∞–≤–∏–ª–∏ —Å—Ç–∞—Ç—É—Å
    lat: '',
    lng: '',
    image: ''
  });
  const [error, setError] = useState(null);

  useEffect(() => {
    if (selectedCoords) {
      setFormData((prev) => ({
        ...prev,
        lat: selectedCoords[0].toString(),
        lng: selectedCoords[1].toString()
      }));
    }
  }, [selectedCoords]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(null);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω—ã –ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    if (!formData.lat || !formData.lng) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ.');
      return;
    }

    try {
      const payload = { 
        ...formData,
        lat: parseFloat(formData.lat),
        lng: parseFloat(formData.lng)
      };

      const token = localStorage.getItem('token');

      const response = await fetch('http://localhost:5000/api/pets', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(payload)
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
      }

      await response.json();
      fetchPets();
      setFormData({ type: '', description: '', status: '', lat: '', lng: '', image: '' });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ:', error);
      setError(error.message);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      {error && <p className="text-red-500">{error}</p>}
      
      {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ */}
      <div>
        <label className="block text-sm font-medium">–¢–∏–ø –∂–∏–≤–æ—Ç–Ω–æ–≥–æ</label>
        <select
          name="type"
          value={formData.type}
          onChange={handleChange}
          required
          className="w-full p-2 border rounded"
        >
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø</option>
          <option value="–°–æ–±–∞–∫–∞">–°–æ–±–∞–∫–∞</option>
          <option value="–ö–æ—à–∫–∞">–ö–æ—à–∫–∞</option>
          <option value="–ü—Ç–∏—Ü–∞">–ü—Ç–∏—Ü–∞</option>
          <option value="–ì—Ä—ã–∑—É–Ω">–ì—Ä—ã–∑—É–Ω</option>
          <option value="–î—Ä—É–≥–æ–µ">–î—Ä—É–≥–æ–µ</option>
        </select>
      </div>

      {/* –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ */}
      <div>
        <label className="block text-sm font-medium">–°—Ç–∞—Ç—É—Å</label>
        <select
          name="status"
          value={formData.status}
          onChange={handleChange}
          required
          className="w-full p-2 border rounded"
        >
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å</option>
          <option value="–ù–∞–π–¥–µ–Ω–æ">–ù–∞–π–¥–µ–Ω–æ</option>
          <option value="–ü–æ—Ç–µ—Ä—è–Ω–æ">–ü–æ—Ç–µ—Ä—è–Ω–æ</option>
        </select>
      </div>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
      <div>
        <label className="block text-sm font-medium">–û–ø–∏—Å–∞–Ω–∏–µ</label>
        <textarea
          name="description"
          placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ"
          value={formData.description}
          onChange={handleChange}
          required
          className="w-full p-2 border rounded"
        />
      </div>

      {}
      <div>
        <p className="text-gray-700">üìç –£–∫–∞–∂–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –º–µ—Å—Ç–æ, –≥–¥–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω–æ –∂–∏–≤–æ—Ç–Ω–æ–µ.</p>
      </div>

      {/* –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã */}
      <div>
        <label className="block text-sm font-medium">–®–∏—Ä–æ—Ç–∞ (–≤—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ)</label>
        <input
          type="text"
          name="lat"
          value={formData.lat}
          readOnly
          className="w-full p-2 border rounded bg-gray-100"
        />
      </div>

      <div>
        <label className="block text-sm font-medium">–î–æ–ª–≥–æ—Ç–∞ (–≤—ã–±—Ä–∞–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ)</label>
        <input
          type="text"
          name="lng"
          value={formData.lng}
          readOnly
          className="w-full p-2 border rounded bg-gray-100"
        />
      </div>

      {/* –§–æ—Ç–æ */}
      <div>
        <label className="block text-sm font-medium">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
        <input
          type="text"
          name="image"
          placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
          value={formData.image}
          onChange={handleChange}
          className="w-full p-2 border rounded"
        />
      </div>

      {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
      <button
        type="submit"
        className="w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600"
      >
        –î–æ–±–∞–≤–∏—Ç—å –∂–∏–≤–æ—Ç–Ω–æ–µ
      </button>
    </form>
  );
}

export default PetForm;
